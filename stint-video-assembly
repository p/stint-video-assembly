#!/usr/bin/env ruby

require 'yaml'
require 'optparse'

class Hash
  def stringify_keys
    out = {}
    each do |k, v|
      out[k.to_s] = v
    end
    out
  end
  
  def deep_stringify_keys
    out = {}
    each do |k, v|
      if v.is_a?(Hash)
        v = v.deep_stringify_keys
      end
      out[k.to_s] = v
    end
    out
  end
end

options = {}

OptionParser.new do |opts|
  opts.on('-s', '--skeleton', 'Create a skeleton configuration file') do
    options[:skeleton] = true
  end
end.parse!

def video_file?(path)
  %w(mov mkv).include?(path.sub(/.*\./, '').downcase)
end

$size_cache = {}
def cached_file_size(path)
  $size_cache[path] ||= File.stat(path).size
end

def size_reasonable?(path)
  cached_file_size(path) > 50_000_000
end

class SkeletonGenerator
  attr_reader :root
  
  def initialize(root)
    @root = root
  end
  
  def generate
    skeleton = {}

    Dir["#{root}/*"].sort.each do |path|
      filename = File.basename(path)
      if video_file?(filename) && size_reasonable?(path)
        skeleton[filename] = {
          split: nil,
          join: nil,
          size: human_size(path),
        }
      end
    end
    
    skeleton
  end
  
  private def human_size(path)
    (cached_file_size(path) / 1024 / 1024).round.to_s + ' MB'
  end
end

if options[:skeleton]
  payload = SkeletonGenerator.new(Dir.pwd).generate.deep_stringify_keys
  puts YAML.dump(payload)
  exit
end
